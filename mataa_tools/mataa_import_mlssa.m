function [mlsvec,mlsfs,stimulus_amp,mlsdf] = mataa_import_mlssa (File,Outfile,Withir);
% function [mlsvec,mlsfs,stimulus_amp,mlsdf] = mataa_import_mlssa (File,Outfile,Withir);
%
% Reads a MLSSA .TIM or .FRQ file and extracts all data from it. Note that this function has been designed using Matlab only (i.e. it might not work as well with Octave).%% INPUT:% File (optional): should contain the filename, including path and extension (.TIM or .FRQ). If File is empty, a file dialog is presented.% Outfile: should contain a filename, including path but no extension (will be given.mat). The output data will be saved in this file.% Withir (optional): parameter, should be included and with the text 'Withir' if the impulse response (or transfer function) mlsvec should be included in the Output file.%% OUTPUT:%	mlsvec	       the impulse response (for .TIM files) or the transfer function (for .FRQ%		       files; containing nfft/2 + 1 complex values).%	mlsfs	       the sampling frequency%	stimulus_amp   the stimulus amplitude used during the measurement%	mlsdf	       the frequency increment (only for .FRQ files)%% Comment 1:    Note that an MLS file (.TIM or .FRQ) is half the size of the%		corresponding Matlab file (MLSSA uses single precision whereas Matlab%		uses double precision). Thus the MLS files can be used and opened every time%		data is needed, instead of creating a Matlab copy of the file.%% Comment 2:	The output parameter stimulus_amp might be needed to scale the impulse%		response correctly. MLSSA does not scale the impulse versus the stimulus_amp%		so that if different stimulus_amp have been used, the corresponding impulse%		responses will display different amplitudes. The transfer functions (.FRQ)%		are however scaled correctly.%% Comment 3:	The impulse response can be retrieved from the transfer function by inserting%		the values for negative frequencies:%		   [mlsvec,mlsfs,stimulus_amp,mlsdf] = readmls('TEST.FRQ',Outfile);%		   npoints = length(mlsvec);%		   mlsvec = [mlsvec; conj(mlsvec( npoints-1:-1:2 ))];%		   ir = real(ifft(mlsvec));	% ir should be a real quantity. Any remaining%						% imaginary values will reflect numerical errors%						% or an incorrect transfer function.%		Note however that if a window was used before calculating the transfer function%		the windowed impulse response will be extracted.%% Comment 4:	The MLSSA files contain a large number of auxilliary parameters that are saved in%		the Outfile. Refer to the appendix of the MLSSA manual for information about these%		parameters, which are those in the setup of the MLSSA measurements. According to%		the manual, this setup structure can be changed in future versions. This one is%		valid for version 9.0.%
% DISCLAIMER:
% This file is part of MATAA.
% 
% MATAA is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
% 
% MATAA is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with MATAA; if not, write to the Free Software
% Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
% 
% Copyright (C) 2007, 2008 Matthias S. Brennwald.
% Contact: info@audioroot.net
% Further information: http://www.audioroot.net/MATAA.html
%
% The program is based on code written by Peter Svensson (svensson[at]iet.ntnu.no) available at http://www.iet.ntnu.no/~svensson/readmls.m. Peter Svensson explicitly agreed to provide his work for inclusion in MATAA.

if nargin == 0,	File = [];endif nargin < 2,	Outfile = [];endif isempty(File),	[File,Filepath] = uigetfile('*.*','Please select the MLSSA file');	if ~isstr(File),		return	else,		File = [Filepath,File];	endendnfname = length(File);	filextfirst = File(nfname-2);if filextfirst == 't' | filextfirst == 'T',   filext = 'TIM';elseif filextfirst == 'f' | filextfirst == 'F',   filext = 'FRQ';endWithirflag = 'no ';if nargin == 3,   if Withir(1) == 'W' | Withir(1) == 'w',      Withirflag = 'yes';   endend%--------------------------------------------------------------------------% First the file is test opened with ieee-le. If it doesn't give the% correct id_tag, try with ieee-be.Machinetype = 'ieee-le';		fid = fopen(File,'r',Machinetype);if fid == -1,	error(['ERROR: The file ',File,' was not found'])endid_tag1 = fread(fid,1,'ushort');id_tag2 = fread(fid,1,'ushort');correcttype = 0;if filext == 'TIM' & id_tag1 == 43981 % id_tag2 == 65535,   correcttype = 1;elseif filext == 'FRQ' & id_tag1 == 48350 & id_tag2 == 65535,	     correcttype = 1;endif correcttype == 0,   fclose(fid);   Machinetype = 'ieee-be';		   fid = fopen(File,'r',Machinetype);	id_tag1 = fread(fid,1,'ushort');	id_tag2 = fread(fid,1,'ushort');	if filext == 'TIM' & id_tag1 == 52651 % id_tag2 == 65535,	       correcttype = 1;	elseif filext == 'FRQ' & id_tag1 == 57020 & id_tag2 == 65535,	      correcttype = 1;   endend%-------------------------------------------------------------------------------% If correcttype has the value 1, we know that the file was successfully opened.if correcttype == 1,   if filext == 'TIM',	   acquisition_algorithm = fread(fid,1,'short');	   delta_time = fread(fid,1,'float');	      mlsfs = 1/delta_time*1000;	   data_length = fread(fid,1,'ulong');	   mlsvec = fread(fid,[data_length,1],'float');	   title = setstr(fread(fid,80,'uchar')).';	   mlsdf = NaN;   elseif filext == 'FRQ', 	   delta_frequency = fread(fid,1,'float');	      mlsdf = delta_frequency*1000;	   data_length = fread(fid,1,'ulong');	   nfft = 2*(data_length-1);	   F = fread(fid,data_length*2,'float');	      mlsvec = F(1:2:2*data_length) + j*F(2:2:2*data_length);	   acquisition_algorithm = NaN; title = NaN;	   mlsfs = nfft*mlsdf;   end   comment = setstr(fread(fid,60,'uchar')).';% Now, read the long struct containing all the auxilliary parameters.   fftsize = fread(fid,1,'ulong');   window_type = fread(fid,1,'short');   sample_rate = fread(fid,1,'float');   filter_band = fread(fid,1,'float');   filter_gain = fread(fid,1,'float');   filter_gain_num = fread(fid,1,'short');   trigger_delay = fread(fid,1,'ulong');   trigger_type = fread(fid,1,'short');   stimulus_type = fread(fid,1,'short');   stimulus_period = fread(fid,1,'ulong');   stimulus_order = fread(fid,1,'short');   stimulus_amp = fread(fid,1,'float');   stimulus_on = fread(fid,1,'short');   acquire_size = fread(fid,1,'ulong');   acquire_algorithm = fread(fid,1,'short');   filter_type = fread(fid,1,'short');   printer_type = fread(fid,1,'short');   beeper_on = fread(fid,1,'short');   dc_couple = fread(fid,1,'short');   autorange_on = fread(fid,1,'short');   units_factor = fread(fid,1,'float');   units_label = setstr(fread(fid,11,'uchar'));   db_reference = fread(fid,1,'float');   stim_units_factor = fread(fid,1,'float');   stim_units_label = setstr(fread(fid,11,'uchar'));   ratio_mode = fread(fid,1,'short');   phase_units = fread(fid,1,'short');   equalize_on = fread(fid,1,'short');   stimulus_low = fread(fid,1,'ulong');   stimulus_high = fread(fid,1,'ulong');   fclose(fid);	if ~isempty(Outfile),		   Varlist=[' fftsize window_type sample_rate filter_band filter_gain filter_gain_num '];	   Varlist=[Varlist 'trigger_delay trigger_type stimulus_type stimulus_period stimulus_order '];	   Varlist=[Varlist 'stimulus_amp stimulus_on acquire_size acquire_algorithm filter_type '];	   Varlist=[Varlist 'printer_type beeper_on dc_couple autorange_on units_factor units_label '];	   Varlist=[Varlist 'db_reference stim_units_factor stim_units_label ratio_mode phase_units '];	   Varlist=[Varlist 'equalize_on stimulus_low stimulus_high comment title '];	   if Withirflag == 'yes',	      Varlist = [Varlist 'mlsvec mlsfs mlsdf'];	   end	   eval(['save ',Outfile,Varlist])	endelse,	% The file couldn't be opened as expected   fclose(fid);   error('ERROR:   The file was found but could not be opened as expected.')end
